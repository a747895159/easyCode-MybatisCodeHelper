package com.bruce.plugin.ui;

import com.bruce.plugin.dto.ColumnTableData;
import com.google.common.collect.Lists;
import com.intellij.codeInspection.ui.ListWrappingTableModel;
import com.intellij.openapi.ui.DialogWrapper;
import com.intellij.ui.table.JBTable;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import org.jetbrains.annotations.Nullable;

import javax.swing.*;
import java.awt.*;
import java.util.List;

public class JTableDialog extends DialogWrapper {
    private JPanel contentPane;
    public JTable theTable;
    private List<ColumnTableData> dataList;

    public JTableDialog(List<ColumnTableData> dataList) {
        super(null);
        this.dataList = dataList;
        $$$setupUI$$$();
        setModal(true);
        setTitle("Type Mapper");
        setSize(800, 600);
        init();

    }

    @Override
    protected void doOKAction() {
        super.doOKAction();
    }

    //    public static void main(String[] args) {
//        List<ColumnTableData> lists = Lists.newArrayList();
//        final ColumnTableData e = new ColumnTableData();
//        e.setColumnName("user_name");
//        e.setColumnType("varChar16");
//        e.setJavaType("java.lang.String");
//        lists.add(e);
//        JTableDialog dialog = new JTableDialog(lists);
//        dialog.pack();
//        dialog.setVisible(true);
//        System.exit(0);
//    }

    private void createUIComponents() {
        // TODO: place custom component creation code here
        List<List<String>> result = Lists.newArrayList();

        List<String> data1 = Lists.newArrayList();
        for (ColumnTableData columnTableData : dataList) {

            data1.add(columnTableData.getColumnName());
        }
        result.add(data1);


        List<String> data2 = Lists.newArrayList();
        for (ColumnTableData columnTableData : dataList) {
            data2.add(columnTableData.getColumnType());
        }

        result.add(data2);


        List<String> data3 = Lists.newArrayList();
        for (ColumnTableData columnTableData : dataList) {
            data3.add(columnTableData.getJavaType());
        }

        result.add(data3);
        final ListWrappingTableModel listWrappingTableModel = new ListWrappingTableModel(result, "Column Name", "Column Type", "Java Type");
        theTable = new JBTable(listWrappingTableModel);
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(1, 1, new Insets(10, 10, 10, 10), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        contentPane.add(panel1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        panel1.add(scrollPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        scrollPane1.setViewportView(theTable);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }

    @Nullable
    @Override
    protected JComponent createCenterPanel() {
        return contentPane;
    }
}
